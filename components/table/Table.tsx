import * as Outline from "@heroicons/react/24/outline";
import {
  Block,
  Button,
  Card,
  ColGrid,
  Flex,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeaderCell,
  TableRow,
  Text,
  Title,
} from "@tremor/react";
import Router from "next/router";
import { useState } from "react";

export default function TableComponent({ data }: { data: Sale[] }) {
  const [name, setName] = useState("");
  const [value, setValue] = useState(0);

  function fetchApiData({ name, value }: { name: string; value: number }) {
    // pushes the data to the api
    fetch("/api/add" + "?name=" + name + "&price=" + value, {
      method: "POST",
    });
    // reloads the page
    Router.reload();
  }
  function removeItem({ id }: { id: string }) {
    fetch("/api/remove" + "?id=" + id, {
      method: "POST",
    });
    Router.reload();
  }

  // a system that allows you to paginate the table
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);
  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(data.length / itemsPerPage); i++) {
    pageNumbers.push(i);
  }
  function paginate(pageNumber: number) {
    setCurrentPage(pageNumber);
  }

  function reducePage() {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  }

  function increasePage() {
    if (currentPage < pageNumbers.length) {
      setCurrentPage(currentPage + 1);
    }
  }

  return (
    <>
      <Block>
        <Flex
          justifyContent="justify-center"
          alignItems="items-center"
          spaceX="space-x-6"
        >
          <Card maxWidth="max-w-xl">
            <Title>Select Page</Title>
            <Flex spaceX="space-x-4" marginTop="mt-4">
              <Button
                icon={Outline.ArrowLeftCircleIcon}
                iconPosition="left"
                text="Prev"
                handleClick={() => reducePage()}
              />
              <input
                value={currentPage}
                onChange={(e) => paginate(Number(e.target.value))}
                min={1}
                max={pageNumbers.length}
                className="w-full p-2 text-center bg-gray-100 border border-black rounded outline-1 outline-gray-300"
              />
              <Button
                icon={Outline.ArrowRightCircleIcon}
                iconPosition="right"
                text="Next"
                handleClick={() => increasePage()}
              />
            </Flex>
          </Card>
        </Flex>
      </Block>
      <Table marginTop="mt-6">
        <TableHead>
          <TableRow>
            <TableHeaderCell textAlignment="text-center">ID</TableHeaderCell>
            <TableHeaderCell textAlignment="text-center">User</TableHeaderCell>
            <TableHeaderCell textAlignment="text-center">Value</TableHeaderCell>
            <TableHeaderCell textAlignment="text-center">
              TimeStamp
            </TableHeaderCell>
            <TableHeaderCell textAlignment="text-center">
              Action
            </TableHeaderCell>
          </TableRow>
        </TableHead>
        <TableRow>
          <TableCell textAlignment="text-center">Autogenerated</TableCell>
          <TableCell textAlignment="text-center">
            <input
              type="text"
              className="w-full min-w-full p-2 bg-gray-100 border border-black rounded outline-1 outline-gray-300"
              onChange={(e) => setName(e.target.value)}
            />
          </TableCell>
          <TableCell textAlignment="text-center">
            <input
              type="number"
              name=""
              id=""
              min={0}
              className="w-1/2 min-w-full p-2 bg-gray-100 border border-black rounded outline-1 outline-gray-300"
              onChange={(e) => setValue(parseInt(e.target.value))}
            />
          </TableCell>
          <TableCell textAlignment="text-center">
            {
              // current date
              new Date().toUTCString()
            }
          </TableCell>
          <TableCell textAlignment="text-center">
            <Button
              size="xs"
              importance="primary"
              color="green"
              text="Add"
              icon={Outline.PlusCircleIcon}
              iconPosition="right"
              handleClick={() => fetchApiData({ name, value })}
            />
          </TableCell>
        </TableRow>
        <TableBody>
          {currentItems.map((sale, i) => (
            <TableRow key={i}>
              <TableCell textAlignment="text-center">{sale.id}</TableCell>
              <TableCell textAlignment="text-center">{sale.name}</TableCell>
              <TableCell textAlignment="text-center">{sale.price}</TableCell>
              <TableCell textAlignment="text-center">
                {new Date(sale.date).toUTCString()}
              </TableCell>
              <TableCell textAlignment="text-center">
                <Button
                  size="xs"
                  importance="primary"
                  color="red"
                  text="Delete"
                  icon={Outline.TrashIcon}
                  iconPosition="right"
                  handleClick={() => removeItem({ id: sale.id })}
                />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </>
  );
}
